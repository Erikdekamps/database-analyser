<?php

/**
 * @file
 * Main module file.
 */

define("DATABASE_ANALYSER_DEFAULT_SEARCH_QUERY", 'http://');
define("DATABASE_ANALYSER_DEFAULT_REPLACE_QUERY", 'https://');

/**
 * Implements hook_menu().
 */
function database_analyser_menu() {
  return array(
    // The default page.
    'admin/config/development/database-analyser' => array(
      'title' => 'Database analyser',
      'description' => 'Analyse all database tables for a search query.',
      'access arguments' => array('access database analyser'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_database_analyser_get_page'),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function database_analyser_permission() {
  return array(
    'access database analyser' => array(
      'title' => t('Access database analyser'),
      'description' => t('Access the database analyser inspection page.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Get the page.
 *
 * @param array $form
 *   The form array.
 * @param $form_state
 *   The form state array.
 *
 * @return mixed
 * @throws \Exception
 */
function _database_analyser_get_page($form, &$form_state) {

  // Add the js.
  drupal_add_js('misc/form.js');
  drupal_add_js('misc/collapse.js');

  // Initialize the default search and replace strings.
  $search = DATABASE_ANALYSER_DEFAULT_SEARCH_QUERY;
  $replace = DATABASE_ANALYSER_DEFAULT_REPLACE_QUERY;

  // Get the query parameters.
  $query_parameters = drupal_get_query_parameters();

  // Check for the search.
  if (isset($query_parameters['search'])) {
    $search = trim($query_parameters['search']);
  }

  // Check for the replace.
  if (isset($query_parameters['replace'])) {
    $replace = trim($query_parameters['replace']);
  }

  // Input fieldset.
  $form['input'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['input']['search'] = array(
    '#type' => 'textfield',
    '#title' => t('Search string'),
    '#default_value' => $search,
  );

  $form['input']['replace'] = array(
    '#type' => 'textfield',
    '#title' => t('Replace string'),
    '#default_value' => $replace,
  );

  // Add the search submit button.
  $form['input']['find'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#submit' => array('_database_analyser_submit_search'),
  );

  // Check for a table parameter.
  $table = !empty($query_parameters['table']) ? $query_parameters['table'] : '';

  // Get the entries.
  $entries = _database_analyser_create_entries_table($search, $table);

  // Output fieldset.
  $form['output'] = array(
    '#type' => 'fieldset',
    '#title' => t('Output'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  // Check for entries.
  if (!empty($entries)) {

    // Loop through the entries.
    foreach ($entries as $entry) {

      // Add the fieldset.
      $form['output'][$entry['table_name']] = array(
        '#type' => 'fieldset',
        '#title' => $entry['table_name'] . ' ' . '(' . $entry['count'] . ')',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      // Add the button
      $form['output'][$entry['table_name']]['replace'] = array(
        '#type' => 'submit',
        '#value' => t('Replace all @count entries in @table', array(
          '@count' => $entry['count'],
          '@table' => $entry['table_name'],
        )),
        '#submit' => array('_database_analyser_replace_entries_submit'),
      );

      // Add the table.
      $form['output'][$entry['table_name']]['table'] = array(
        '#type' => 'markup',
        '#markup' => $entry['table'],
      );

      // Add the table class.
      $form['output'][$entry['table_name']]['replace']['#attributes']['table'] = array(
        $entry['table_name'],
      );

      // Add the column classes.
      if (!empty($entry['columns'])) {
        foreach ($entry['columns'] as $col) {
          $form['output'][$entry['table_name']]['replace']['#attributes']['columns'][] = $col;
        }
      }
    }
  }
  else {

    // Add the fieldset.
    $form['output']['empty'] = array(
      '#type' => 'markup',
      '#markup' => t('No data found.'),
    );
  }

  // Return the form.
  return $form;
}

/**
 * Create the entries table.
 *
 * @param string $search_string
 *   The search string.
 * @param string $table
 *   The database table.
 *
 * @return array
 *   Returns an array.
 *
 * @throws \Exception
 */
function _database_analyser_create_entries_table($search_string, $table = '') {

  // Get the entries.
  $entries = _database_analyser_get_entries($search_string, $table);

  // Initialize the table and header.
  $tables = array();

  $header = array(
    t('Column'),
    t('Value'),
  );

  // Check the entries.
  if (!empty($entries)) {

    // Loop through the tables.
    foreach ($entries as $table_name => $fields) {

      $columns = $rows = array();

      // Loop through the fields.
      foreach ($fields as $field => $values) {

        $columns[] = $field;

        // Loop through the values.
        foreach ($values as $i => $value) {
          $rows[] = array(
            $field,
            _database_analyser_highlight_value($value, $search_string),
          );
        }
      }

      // Create the table.
      $table = theme('table', array(
        'header' => $header,
        'rows' => $rows,
        'empty' => t('Your table is empty'),
        'sticky' => TRUE,
        'attributes' => array(
          'width' => '100%',
        ),
      ));

      $tables[] = array(
        'table_name' => $table_name,
        'count' => count($rows),
        'columns' => $columns,
        'table' => $table,
      );
    }
  }

  // Return the output.
  return $tables;
}

/**
 * Get the entries.
 *
 * @param string $search_string
 *   The search string.
 * @param string $table
 *   The database table.
 *
 * @return array
 *   Returns the entries as array.
 */
function _database_analyser_get_entries($search_string, $table = '') {

  $rows = array();

  // Get the tables.
  $tables = _database_analyser_get_tables($table);

  // Loop through the tables.
  foreach ($tables as $table => $fields) {

    // Check if the table is excluded.
    $table_excluded = _database_analyser_table_is_excluded($table);

    if (!$table_excluded) {

      // Loop through the fields.
      foreach ($fields as $field) {

        // Create the field entry.
        $entry = _database_analyser_get_table_field_entries($table, $field, $search_string);

        // Check the field entry.
        if (!empty($entry)) {

          // Add the field value.
          $rows[$table][$field] = $entry;
        }
      }
    }
  }

  // Return the database rows.
  return $rows;
}

/**
 * Get the tables in the database.
 *
 * @param string $table
 *   The table.
 *
 * @return array
 */
function _database_analyser_get_tables($table = '') {

  // Initialize the array.
  $tables = array();

  // Get the schema.
  $schemas = drupal_get_schema();

  // Check for a single table and use that one.
  if (!empty($table)) {
    $schemas = array($table => $schemas[$table]);
  }

  // Loop through the schemas and store the fields.
  foreach ($schemas as $table => $schema) {
    if (db_table_exists($table)) {
      foreach ($schema['fields'] as $field => $values) {
        if (db_field_exists($table, $field)) {
          $tables[$table][$field] = $field;
        }
      }
    }
  }

  // Return the array.
  return $tables;
}

/**
 * Get the entries within a table.
 *
 * @param string $table
 *   The database table name.
 * @param string $field
 *   The database table field name.
 * @param string $search_string
 *   The search string.
 *
 * @return array
 *   Returns a result if found.
 */
function _database_analyser_get_table_field_entries($table, $field, $search_string) {

  // Query the table.
  $query = db_select($table, 't')
    ->fields('t', array($field))
    ->condition("t.$field", '%' . db_like($search_string) . '%', 'LIKE');

  // Fetch the col.
  return $query->execute()->fetchCol(0);
}

/**
 * Add highlighting in bold to a value.
 *
 * @param string $value
 *   The value to highlight in.
 * @param string $search_string
 *   The search string.
 *
 * @return mixed
 *   Returns a string.
 */
function _database_analyser_highlight_value($value, $search_string) {

  // Generate a text version.
  $value = check_plain($value);

  // Set the highlighting.
  $replace = '<strong style="color: red;">' . $search_string . '</strong>';

  // Replace the search query to surround it with strong tags.
  return str_replace($search_string, $replace, $value);
}

/**
 * Check if a table is excluded.
 *
 * @param string $table
 *   The table to check.
 *
 * @return bool
 *   Returns TRUE if excluded.
 */
function _database_analyser_table_is_excluded($table) {

  // Excluded tables.
  $excluded = array(
    'cache',
    'webform_submitted_data',
    'watchdog',
  );

  // Loop through the excluded tables.
  foreach ($excluded as $e) {

    // Match the current table.
    if (stristr($table, $e) !== FALSE) {
      return TRUE;
    }
  }

  // Return false by default.
  return FALSE;
}

/**
 * Form submit handler.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function _database_analyser_submit_search($form, &$form_state) {

  // Build the query.
  $query = array();

  // Get the search and replace parameters.
  $query['search'] = !empty($form_state['input']['search']) ? $form_state['input']['search'] : '';
  $query['replace'] = !empty($form_state['input']['replace']) ? $form_state['input']['replace'] : '';

  // Redirect.
  $form_state['redirect'] = array(
    'admin/config/development/database-analyser',
    array(
      'query' => $query,
    ),
  );
}

/**
 * Form submit handler.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function _database_analyser_replace_entries_submit($form, &$form_state) {

  // Get the triggering element.
  $triggering_element = $form_state['triggering_element'];

  // Get the search and replace values.
  $search = $form_state['input']['search'];
  $replace = $form_state['input']['replace'];
  $table = $triggering_element['#attributes']['table'][0];

  // Trigger for all columns.
  foreach ($triggering_element['#attributes']['columns'] as $column) {
    _database_analyser_replace_data($table, $column, $search, $replace);
  }

  // Build the query.
  $query = array();

  // Get the search and replace parameters.
  $query['search'] = !empty($search) ? $search : '';
  $query['replace'] = !empty($replace) ? $replace : '';

  // Redirect.
  $form_state['redirect'] = array(
    'admin/config/development/database-analyser',
    array(
      'query' => $query,
    ),
  );
}

/**
 * Form submit redirect function.
 *
 * @param string $search
 *   The search string.
 * @param string $replace
 *   The replace string.
 */
function _database_analyser_get_form_redirect_url($search, $replace) {

  // Todo: check if needed.
}

/**
 * Replace data in the database.
 *
 * @param string $table
 *   The table name string
 * @param string $column
 *   The column name string
 * @param string $search
 *   The search query string
 * @param string $replace
 *   The replace query string
 */
function _database_analyser_replace_data($table, $column, $search, $replace) {

  // Log the operation.
  watchdog('database_analyser', 'Updating table @table column @column from @search to @replace', array(
    '@table' => $table,
    '@column' => $column,
    '@search' => $search,
    '@replace' => $replace,
  ));

  try {

    // Run the update query.
    db_update($table)
      ->expression($column, "replace($column, :old, :new)", array(
        ':old' => $search,
        ':new' => $replace,
      ))
      ->execute();
  }
  catch (PDOException $e) {
    watchdog('database_analyser', 'PDOException: @e', array('@e' => $e->getMessage()));
  }
}
